/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 .\public\cube_run.glb -t 
*/
'use client'

import * as THREE from 'three'
import React, { ChangeEvent, Suspense, useEffect, useMemo, useState } from 'react'
import { Canvas, useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations, PerspectiveCamera, OrbitControls } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'
import BlenderGrid from './blenderGrid'

type ActionName = 'ANI-animal_run' | 'ANI-cube_female_walk' | 'ANI-Cube_run' | 'ANI-Cube_walk' | 'ANI-Cube_walk_jolly' | 'ANI-Cube_walk_tired'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    ['GEO-Cube']: THREE.SkinnedMesh
    ['P-Root']: THREE.Bone
    ['ParentSwitch-FootL']: THREE.Bone
    ['ParentSwitch-FootR']: THREE.Bone
  }
  materials: {
    Gray: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export function CubeAni() {
  const [aniStyle, setAniStyle] = useState('ANI-Cube_walk')

  function changeAni(e: React.ChangeEvent<HTMLSelectElement>) {
    setAniStyle(e.target.value)
  }

  return(
      <>
        <Canvas className="h-full !min-h-80 lg:h-96" style={{height: '384px'}}>
          <Suspense fallback={null}>
            <Cube aniStyle={aniStyle} />
          </Suspense>
          <BlenderGrid />
          <PerspectiveCamera makeDefault position={[5, 5, 5]} />
          <OrbitControls enablePan={false} enableZoom={false} enableDamping={false}/>
        </Canvas>
        <div className="absolute top-2 right-2">
          <select aria-label='Animations' name="ani" id="ani" value={aniStyle} onChange={(e: ChangeEvent<HTMLSelectElement>) => changeAni(e)}>
            <option value="ANI-Cube_walk">Walk</option>
            <option value="ANI-cube_female_walk">Female Walk</option>
            <option value="ANI-Cube_run">Run</option>
            <option value="ANI-Cube_walk_jolly">Jolly</option>
            <option value="ANI-Cube_walk_tired">Tired</option>
            <option value="ANI-animal_run">Animal</option>
          </select>
        </div>
          <span className="absolute left-0 bottom-0 p-2 text-zinc-200 bg-gradient-to-t from-black/70 to-transparent w-full">
            <a href="https://studio.blender.org/characters/default-cube-rig/v1/" className='text-blue-400 underline' target='_blank'>Default Cube</a> {' '}
            from Blender Studio
          </span>
      </>
  )
}

const Cube = ({ aniStyle, ...otherProps }: {aniStyle: string}) => {
  
  const group = React.useRef<THREE.Group>(null)
  const { scene, animations } = useGLTF('/cube_run.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions } = useAnimations(animations, group)

  const aniStylesArr = useMemo(() => ['ANI-animal_run', 'ANI-cube_female_walk', 'ANI-Cube_run', 'ANI-Cube_walk', 'ANI-Cube_walk_jolly', 'ANI-Cube_walk_tired'], [])

  useEffect(() => {
    aniStylesArr.map( i => actions[i]?.stop())
    actions[aniStyle]!.play()
  })

  return (
    <group ref={group} {...otherProps} dispose={null}>
      <group name="Scene">
        <group name="RIG-Cube">
          <primitive object={nodes['P-Root']} />
          <primitive object={nodes['ParentSwitch-FootL']} />
          <primitive object={nodes['ParentSwitch-FootR']} />
          <skinnedMesh name="GEO-Cube" geometry={nodes['GEO-Cube'].geometry} material={materials.Gray} skeleton={nodes['GEO-Cube'].skeleton}>
            <meshMatcapMaterial color='#ccccff' />
          </skinnedMesh>
        </group>
        <group name="WGT-Circle" position={[1, 1, -1]} rotation={[Math.PI / 2, 0, 0]} scale={0.747} />
        <group name="WGT-Cube" position={[4, 0, -8]} />
        <group name="WGT-Root" position={[12, 0, -6]} />
        <group name="WGT-Sphere_XY" position={[14, 0, -4]} />
        <group name="WGT-Square" position={[14, 0, -6]} />
        <group name="WGT-Torso_Master" position={[16, 0, 0]} />
        <group name="WGT-Axes_6" position={[2, 0, 0]} />
      </group>
    </group>
  )
}

useGLTF.preload('/cube_run.glb')


