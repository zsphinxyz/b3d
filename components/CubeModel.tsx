/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 .\public\cubeModel.glb -t 
*/
'use client'

import * as THREE from 'three'
import React, { useEffect } from 'react'
import { useGLTF, useAnimations, PerspectiveCamera, OrbitControls } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import BlenderGrid from './blenderGrid'
import { Canvas } from '@react-three/fiber'

type ActionName = 'KeyAction'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh
  }
  materials: {
    Material: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export function Cube(props: JSX.IntrinsicElements['group']) {
  const group = React.useRef<THREE.Group>(null)
  const { nodes, materials, animations } = useGLTF('/cubeModel.glb') as GLTFResult
  const { actions } = useAnimations(animations, group)
  useEffect(() => {
    actions['KeyAction']?.play()
  })
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <mesh castShadow receiveShadow name="Cube" geometry={nodes.Cube.geometry} material={materials.Material} morphTargetDictionary={nodes.Cube.morphTargetDictionary} morphTargetInfluences={nodes.Cube.morphTargetInfluences} position={[0, 1, 0]}>
          {/* <meshMatcapMaterial flatShading /> */}
          <meshStandardMaterial envMapIntensity={0.25} color='#aeaed0' />
          <ambientLight intensity={0.1} />
        </mesh>

      </group>
    </group>
  )
}

export default function CubeModel() {
  return (
    <Canvas shadows className="h-full min-h-80 lg:h-96" style={{ height: '384px' }} >
      <color attach='background' args={['#222']} />
      <group position={[0, 0, 3]}>
        <Cube />
      <OrbitControls enablePan={false} enableZoom={false} enableDamping={false} target={[0, 0, 2]} />
      <PerspectiveCamera makeDefault position={[1, 4, 10]} fov={80} zoom={3} />

      <BlenderGrid />

      <group>
        <directionalLight position={[5, 5, 5]} intensity={1} shadow-mapSize={1024} castShadow />
        <directionalLight position={[-5, 5, 5]} intensity={0.5} shadow-mapSize={128} castShadow />
        <directionalLight position={[-5, 5, -5]} intensity={0.5} shadow-mapSize={128} castShadow />
        <directionalLight position={[0, 5, 0]} intensity={0.5} shadow-mapSize={128} castShadow />
      </group>
    </group>
    </Canvas>
  )
}

useGLTF.preload('/cubeModel.glb')
