/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 .\public\test.glb -t 
*/

import * as THREE from 'three'
import React, { useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type ActionName = 'Cube'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh
  }
  materials: {}
  animations: GLTFAction[]
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const group = React.useRef<THREE.Group>(null)
  const { nodes, animations } = useGLTF('/test.glb') as GLTFResult
  const { actions } = useAnimations(animations, group)
  useEffect(() => {
    actions['Cube']?.play()
  }, [])
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <mesh name="Cube" geometry={nodes.Cube.geometry} material={nodes.Cube.material} morphTargetDictionary={nodes.Cube.morphTargetDictionary} morphTargetInfluences={nodes.Cube.morphTargetInfluences}>
          <meshMatcapMaterial />
        </mesh>
      </group>
    </group>
  )
}

useGLTF.preload('/test.glb')
